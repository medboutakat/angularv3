/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICustomerCategoriesClient {
    getAll(): Observable<CustomerCategoriesListVm>;
    upsert(command: UpsertCustomerCategoryCommand): Observable<void>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class CustomerCategoriesClient implements ICustomerCategoriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<CustomerCategoriesListVm> {
        let url_ = this.baseUrl + "/api/CustomerCategories/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<CustomerCategoriesListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CustomerCategoriesListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<CustomerCategoriesListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerCategoriesListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CustomerCategoriesListVm>(<any>null);
    }

    upsert(command: UpsertCustomerCategoryCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/CustomerCategories/Upsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/CustomerCategories/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface ICustomersClient {
    getAll(): Observable<CustomersListVm>;
    get(id: number): Observable<CustomerDetailVm>;
    create(command: CreateCustomerCommand): Observable<void>;
    update(id: string, command: UpdateCustomerCommand): Observable<void>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class CustomersClient implements ICustomersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<CustomersListVm> {
        let url_ = this.baseUrl + "/api/Customers/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<CustomersListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CustomersListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<CustomersListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomersListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CustomersListVm>(<any>null);
    }

    get(id: number): Observable<CustomerDetailVm> {
        let url_ = this.baseUrl + "/api/Customers/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<CustomerDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CustomerDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CustomerDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CustomerDetailVm>(<any>null);
    }

    create(command: CreateCustomerCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(id: string, command: UpdateCustomerCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/Update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IEmployeesClient {
    getAll(): Observable<EmployeeLookupDto[]>;
    get(id: number): Observable<EmployeeDetailVm>;
    upsert(command: UpsertEmployeeCommand): Observable<void>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class EmployeesClient implements IEmployeesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<EmployeeLookupDto[]> {
        let url_ = this.baseUrl + "/api/Employees/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<EmployeeLookupDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<EmployeeLookupDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<EmployeeLookupDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EmployeeLookupDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EmployeeLookupDto[]>(<any>null);
    }

    get(id: number): Observable<EmployeeDetailVm> {
        let url_ = this.baseUrl + "/api/Employees/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<EmployeeDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<EmployeeDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<EmployeeDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmployeeDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EmployeeDetailVm>(<any>null);
    }

    upsert(command: UpsertEmployeeCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Employees/Upsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Employees/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IOrderClient {
    getAll(): Observable<OrderLookupDto[]>;
    upsert(command: UpsertOrderCommand): Observable<void>;
    get(id: number): Observable<OrderDetailVm>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class OrderClient implements IOrderClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<OrderLookupDto[]> {
        let url_ = this.baseUrl + "/api/Order";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<OrderLookupDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrderLookupDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<OrderLookupDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OrderLookupDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderLookupDto[]>(<any>null);
    }

    upsert(command: UpsertOrderCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<OrderDetailVm> {
        let url_ = this.baseUrl + "/api/Order/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<OrderDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrderDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OrderDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderDetailVm>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Order/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IProductCategoriesClient {
    getAll(): Observable<CategoriesListVm>;
    upsert(command: UpsertProductCategoryCommand): Observable<void>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class ProductCategoriesClient implements IProductCategoriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<CategoriesListVm> {
        let url_ = this.baseUrl + "/api/ProductCategories/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<CategoriesListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CategoriesListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<CategoriesListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoriesListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoriesListVm>(<any>null);
    }

    upsert(command: UpsertProductCategoryCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/ProductCategories/Upsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/ProductCategories/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IProductsClient {
    getAll(): Observable<ProductsListVm>;
    get(id: number): Observable<ProductDetailVm>;
    create(command: CreateProductCommand): Observable<number>;
    update(command: UpdateProductCommand): Observable<void>;
    delete(id: number): Observable<void>;
    download(): Observable<FileResponse>;
}

@Injectable()
export class ProductsClient implements IProductsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<ProductsListVm> {
        let url_ = this.baseUrl + "/api/Products/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ProductsListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductsListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ProductsListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductsListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductsListVm>(<any>null);
    }

    get(id: number): Observable<ProductDetailVm> {
        let url_ = this.baseUrl + "/api/Products/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ProductDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ProductDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductDetailVm>(<any>null);
    }

    create(command: CreateProductCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Products/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(command: UpdateProductCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Products/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Products/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    download(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Products/Download";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownload(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDownload(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IVendorCategoriesClient {
    getAll(): Observable<VendorCategoriesListVm>;
    upsert(command: UpsertVendorCategoryCommand): Observable<void>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class VendorCategoriesClient implements IVendorCategoriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<VendorCategoriesListVm> {
        let url_ = this.baseUrl + "/api/VendorCategories/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<VendorCategoriesListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<VendorCategoriesListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<VendorCategoriesListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VendorCategoriesListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VendorCategoriesListVm>(<any>null);
    }

    upsert(command: UpsertVendorCategoryCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/VendorCategories/Upsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/VendorCategories/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IVendorsClient {
    getAll(): Observable<VendorLookupDto[]>;
    get(id: number): Observable<VendorDetailVm>;
    create(command: CreateVendorCommand): Observable<void>;
    update(command: UpdateVendorCommand): Observable<void>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class VendorsClient implements IVendorsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<VendorLookupDto[]> {
        let url_ = this.baseUrl + "/api/Vendors/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<VendorLookupDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<VendorLookupDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<VendorLookupDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VendorLookupDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VendorLookupDto[]>(<any>null);
    }

    get(id: number): Observable<VendorDetailVm> {
        let url_ = this.baseUrl + "/api/Vendors/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<VendorDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<VendorDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<VendorDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VendorDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VendorDetailVm>(<any>null);
    }

    create(command: CreateVendorCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Vendors/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(command: UpdateVendorCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Vendors/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Vendors/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IWeatherForecastClient {
    get(): Observable<any[]>;
}

@Injectable()
export class WeatherForecastClient implements IWeatherForecastClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<any[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<any[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<any[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<any[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any[]>(<any>null);
    }
}

export class CustomerCategoriesListVm implements ICustomerCategoriesListVm {
    categories?: CustomerCategoryDto[] | undefined;
    count?: number;

    constructor(data?: ICustomerCategoriesListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["categories"])) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(CustomerCategoryDto.fromJS(item));
            }
            this.count = data["count"];
        }
    }

    static fromJS(data: any): CustomerCategoriesListVm {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerCategoriesListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data; 
    }
}

export interface ICustomerCategoriesListVm {
    categories?: CustomerCategoryDto[] | undefined;
    count?: number;
}

export class CustomerCategoryDto implements ICustomerCategoryDto {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: ICustomerCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CustomerCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICustomerCategoryDto {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
            if (data["extensions"]) {
                this.extensions = {} as any;
                for (let key in data["extensions"]) {
                    if (data["extensions"].hasOwnProperty(key))
                        this.extensions![key] = data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

export class UpsertCustomerCategoryCommand implements IUpsertCustomerCategoryCommand {
    id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;

    constructor(data?: IUpsertCustomerCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.picture = data["picture"];
        }
    }

    static fromJS(data: any): UpsertCustomerCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertCustomerCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["picture"] = this.picture;
        return data; 
    }
}

export interface IUpsertCustomerCategoryCommand {
    id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;
}

export class CustomersListVm implements ICustomersListVm {
    customers?: CustomerLookupDto[] | undefined;

    constructor(data?: ICustomersListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["customers"])) {
                this.customers = [] as any;
                for (let item of data["customers"])
                    this.customers!.push(CustomerLookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomersListVm {
        data = typeof data === 'object' ? data : {};
        let result = new CustomersListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.customers)) {
            data["customers"] = [];
            for (let item of this.customers)
                data["customers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICustomersListVm {
    customers?: CustomerLookupDto[] | undefined;
}

export class CustomerLookupDto implements ICustomerLookupDto {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: ICustomerLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CustomerLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICustomerLookupDto {
    id?: string | undefined;
    name?: string | undefined;
}

export class CustomerDetailVm implements ICustomerDetailVm {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: ICustomerDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): CustomerDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface ICustomerDetailVm {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class CreateCustomerCommand implements ICreateCustomerCommand {
    id?: number;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: ICreateCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): CreateCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface ICreateCustomerCommand {
    id?: number;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class UpdateCustomerCommand implements IUpdateCustomerCommand {
    id?: number;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: IUpdateCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): UpdateCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface IUpdateCustomerCommand {
    id?: number;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class EmployeeLookupDto implements IEmployeeLookupDto {
    id?: number;
    name?: string | undefined;
    position?: string | undefined;
    extension?: string | undefined;

    constructor(data?: IEmployeeLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.position = data["position"];
            this.extension = data["extension"];
        }
    }

    static fromJS(data: any): EmployeeLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["position"] = this.position;
        data["extension"] = this.extension;
        return data; 
    }
}

export interface IEmployeeLookupDto {
    id?: number;
    name?: string | undefined;
    position?: string | undefined;
    extension?: string | undefined;
}

export class EmployeeDetailVm implements IEmployeeDetailVm {
    id?: number;
    title?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    position?: string | undefined;
    extension?: string | undefined;
    hireDate?: Date | undefined;
    notes?: string | undefined;
    photo?: string | undefined;
    managerId?: number | undefined;
    territories?: EmployeeTerritoryDto[] | undefined;

    constructor(data?: IEmployeeDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.birthDate = data["birthDate"] ? new Date(data["birthDate"].toString()) : <any>undefined;
            this.address = data["address"];
            this.city = data["city"];
            this.region = data["region"];
            this.postalCode = data["postalCode"];
            this.country = data["country"];
            this.homePhone = data["homePhone"];
            this.position = data["position"];
            this.extension = data["extension"];
            this.hireDate = data["hireDate"] ? new Date(data["hireDate"].toString()) : <any>undefined;
            this.notes = data["notes"];
            this.photo = data["photo"];
            this.managerId = data["managerId"];
            if (Array.isArray(data["territories"])) {
                this.territories = [] as any;
                for (let item of data["territories"])
                    this.territories!.push(EmployeeTerritoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EmployeeDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["homePhone"] = this.homePhone;
        data["position"] = this.position;
        data["extension"] = this.extension;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        data["photo"] = this.photo;
        data["managerId"] = this.managerId;
        if (Array.isArray(this.territories)) {
            data["territories"] = [];
            for (let item of this.territories)
                data["territories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEmployeeDetailVm {
    id?: number;
    title?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    position?: string | undefined;
    extension?: string | undefined;
    hireDate?: Date | undefined;
    notes?: string | undefined;
    photo?: string | undefined;
    managerId?: number | undefined;
    territories?: EmployeeTerritoryDto[] | undefined;
}

export class EmployeeTerritoryDto implements IEmployeeTerritoryDto {
    territoryId?: string | undefined;
    territory?: string | undefined;
    region?: string | undefined;

    constructor(data?: IEmployeeTerritoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.territoryId = data["territoryId"];
            this.territory = data["territory"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): EmployeeTerritoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeTerritoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["territoryId"] = this.territoryId;
        data["territory"] = this.territory;
        data["region"] = this.region;
        return data; 
    }
}

export interface IEmployeeTerritoryDto {
    territoryId?: string | undefined;
    territory?: string | undefined;
    region?: string | undefined;
}

export class UpsertEmployeeCommand implements IUpsertEmployeeCommand {
    id?: number | undefined;
    title?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    position?: string | undefined;
    extension?: string | undefined;
    hireDate?: Date | undefined;
    notes?: string | undefined;
    photo?: string | undefined;
    managerId?: number | undefined;

    constructor(data?: IUpsertEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.birthDate = data["birthDate"] ? new Date(data["birthDate"].toString()) : <any>undefined;
            this.address = data["address"];
            this.city = data["city"];
            this.region = data["region"];
            this.postalCode = data["postalCode"];
            this.country = data["country"];
            this.homePhone = data["homePhone"];
            this.position = data["position"];
            this.extension = data["extension"];
            this.hireDate = data["hireDate"] ? new Date(data["hireDate"].toString()) : <any>undefined;
            this.notes = data["notes"];
            this.photo = data["photo"];
            this.managerId = data["managerId"];
        }
    }

    static fromJS(data: any): UpsertEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["homePhone"] = this.homePhone;
        data["position"] = this.position;
        data["extension"] = this.extension;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        data["photo"] = this.photo;
        data["managerId"] = this.managerId;
        return data; 
    }
}

export interface IUpsertEmployeeCommand {
    id?: number | undefined;
    title?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    position?: string | undefined;
    extension?: string | undefined;
    hireDate?: Date | undefined;
    notes?: string | undefined;
    photo?: string | undefined;
    managerId?: number | undefined;
}

export class OrderLookupDto implements IOrderLookupDto {
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;

    constructor(data?: IOrderLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>undefined;
            this.requiredDate = data["requiredDate"] ? new Date(data["requiredDate"].toString()) : <any>undefined;
            this.shippedDate = data["shippedDate"] ? new Date(data["shippedDate"].toString()) : <any>undefined;
            this.shipVia = data["shipVia"];
            this.freight = data["freight"];
            this.shipName = data["shipName"];
            this.shipAddress = data["shipAddress"];
            this.shipCity = data["shipCity"];
            this.shipRegion = data["shipRegion"];
            this.shipPostalCode = data["shipPostalCode"];
            this.shipCountry = data["shipCountry"];
        }
    }

    static fromJS(data: any): OrderLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requiredDate"] = this.requiredDate ? this.requiredDate.toISOString() : <any>undefined;
        data["shippedDate"] = this.shippedDate ? this.shippedDate.toISOString() : <any>undefined;
        data["shipVia"] = this.shipVia;
        data["freight"] = this.freight;
        data["shipName"] = this.shipName;
        data["shipAddress"] = this.shipAddress;
        data["shipCity"] = this.shipCity;
        data["shipRegion"] = this.shipRegion;
        data["shipPostalCode"] = this.shipPostalCode;
        data["shipCountry"] = this.shipCountry;
        return data; 
    }
}

export interface IOrderLookupDto {
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
}

export class OrderDetailVm implements IOrderDetailVm {
    id?: number;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    shipper?: Shipper | undefined;
    orderDetails?: OrderDetail[] | undefined;

    constructor(data?: IOrderDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>undefined;
            this.requiredDate = data["requiredDate"] ? new Date(data["requiredDate"].toString()) : <any>undefined;
            this.shippedDate = data["shippedDate"] ? new Date(data["shippedDate"].toString()) : <any>undefined;
            this.shipVia = data["shipVia"];
            this.freight = data["freight"];
            this.shipName = data["shipName"];
            this.shipAddress = data["shipAddress"];
            this.shipCity = data["shipCity"];
            this.shipRegion = data["shipRegion"];
            this.shipPostalCode = data["shipPostalCode"];
            this.shipCountry = data["shipCountry"];
            this.shipper = data["shipper"] ? Shipper.fromJS(data["shipper"]) : <any>undefined;
            if (Array.isArray(data["orderDetails"])) {
                this.orderDetails = [] as any;
                for (let item of data["orderDetails"])
                    this.orderDetails!.push(OrderDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requiredDate"] = this.requiredDate ? this.requiredDate.toISOString() : <any>undefined;
        data["shippedDate"] = this.shippedDate ? this.shippedDate.toISOString() : <any>undefined;
        data["shipVia"] = this.shipVia;
        data["freight"] = this.freight;
        data["shipName"] = this.shipName;
        data["shipAddress"] = this.shipAddress;
        data["shipCity"] = this.shipCity;
        data["shipRegion"] = this.shipRegion;
        data["shipPostalCode"] = this.shipPostalCode;
        data["shipCountry"] = this.shipCountry;
        data["shipper"] = this.shipper ? this.shipper.toJSON() : <any>undefined;
        if (Array.isArray(this.orderDetails)) {
            data["orderDetails"] = [];
            for (let item of this.orderDetails)
                data["orderDetails"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrderDetailVm {
    id?: number;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    shipper?: Shipper | undefined;
    orderDetails?: OrderDetail[] | undefined;
}

export class Shipper implements IShipper {
    id?: number;
    companyName?: string | undefined;
    phone?: string | undefined;
    orders?: Order[] | undefined;

    constructor(data?: IShipper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyName = data["companyName"];
            this.phone = data["phone"];
            if (Array.isArray(data["orders"])) {
                this.orders = [] as any;
                for (let item of data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Shipper {
        data = typeof data === 'object' ? data : {};
        let result = new Shipper();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["phone"] = this.phone;
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IShipper {
    id?: number;
    companyName?: string | undefined;
    phone?: string | undefined;
    orders?: Order[] | undefined;
}

export class AuditableEntity implements IAuditableEntity {
    createdBy?: string | undefined;
    created?: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;

    constructor(data?: IAuditableEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createdBy = data["createdBy"];
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            this.lastModifiedBy = data["lastModifiedBy"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuditableEntity {
        data = typeof data === 'object' ? data : {};
        let result = new AuditableEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdBy"] = this.createdBy;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAuditableEntity {
    createdBy?: string | undefined;
    created?: Date;
    lastModifiedBy?: string | undefined;
    lastModified?: Date | undefined;
}

export class EntityBaseCode extends AuditableEntity implements IEntityBaseCode {
    id?: number;
    code?: string | undefined;

    constructor(data?: IEntityBaseCode) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): EntityBaseCode {
        data = typeof data === 'object' ? data : {};
        let result = new EntityBaseCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        super.toJSON(data);
        return data; 
    }
}

export interface IEntityBaseCode extends IAuditableEntity {
    id?: number;
    code?: string | undefined;
}

export class EntityBaseHeaderSales extends EntityBaseCode implements IEntityBaseHeaderSales {
    date?: Date;
    total?: number;
    customerId?: number;
    customer?: Customer | undefined;
    employeeId?: number | undefined;
    employee?: Employee | undefined;

    constructor(data?: IEntityBaseHeaderSales) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.date = data["date"] ? new Date(data["date"].toString()) : <any>undefined;
            this.total = data["total"];
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : <any>undefined;
            this.employeeId = data["employeeId"];
            this.employee = data["employee"] ? Employee.fromJS(data["employee"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EntityBaseHeaderSales {
        data = typeof data === 'object' ? data : {};
        let result = new EntityBaseHeaderSales();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["total"] = this.total;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["employeeId"] = this.employeeId;
        data["employee"] = this.employee ? this.employee.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IEntityBaseHeaderSales extends IEntityBaseCode {
    date?: Date;
    total?: number;
    customerId?: number;
    customer?: Customer | undefined;
    employeeId?: number | undefined;
    employee?: Employee | undefined;
}

export class Order extends EntityBaseHeaderSales implements IOrder {
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    shipper?: Shipper | undefined;
    orderDetails?: OrderDetail[] | undefined;

    constructor(data?: IOrder) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>undefined;
            this.requiredDate = data["requiredDate"] ? new Date(data["requiredDate"].toString()) : <any>undefined;
            this.shippedDate = data["shippedDate"] ? new Date(data["shippedDate"].toString()) : <any>undefined;
            this.shipVia = data["shipVia"];
            this.freight = data["freight"];
            this.shipName = data["shipName"];
            this.shipAddress = data["shipAddress"];
            this.shipCity = data["shipCity"];
            this.shipRegion = data["shipRegion"];
            this.shipPostalCode = data["shipPostalCode"];
            this.shipCountry = data["shipCountry"];
            this.shipper = data["shipper"] ? Shipper.fromJS(data["shipper"]) : <any>undefined;
            if (Array.isArray(data["orderDetails"])) {
                this.orderDetails = [] as any;
                for (let item of data["orderDetails"])
                    this.orderDetails!.push(OrderDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requiredDate"] = this.requiredDate ? this.requiredDate.toISOString() : <any>undefined;
        data["shippedDate"] = this.shippedDate ? this.shippedDate.toISOString() : <any>undefined;
        data["shipVia"] = this.shipVia;
        data["freight"] = this.freight;
        data["shipName"] = this.shipName;
        data["shipAddress"] = this.shipAddress;
        data["shipCity"] = this.shipCity;
        data["shipRegion"] = this.shipRegion;
        data["shipPostalCode"] = this.shipPostalCode;
        data["shipCountry"] = this.shipCountry;
        data["shipper"] = this.shipper ? this.shipper.toJSON() : <any>undefined;
        if (Array.isArray(this.orderDetails)) {
            data["orderDetails"] = [];
            for (let item of this.orderDetails)
                data["orderDetails"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IOrder extends IEntityBaseHeaderSales {
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    shipper?: Shipper | undefined;
    orderDetails?: OrderDetail[] | undefined;
}

export class EntityBaseDetailsSales extends AuditableEntity implements IEntityBaseDetailsSales {
    id?: number;
    no?: number;
    productCode?: string | undefined;
    productPName?: string | undefined;
    orderId?: number;
    productId?: number;
    unitPrice?: number;
    quantity?: number;
    discount?: number;
    product?: Product | undefined;

    constructor(data?: IEntityBaseDetailsSales) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.no = data["no"];
            this.productCode = data["productCode"];
            this.productPName = data["productPName"];
            this.orderId = data["orderId"];
            this.productId = data["productId"];
            this.unitPrice = data["unitPrice"];
            this.quantity = data["quantity"];
            this.discount = data["discount"];
            this.product = data["product"] ? Product.fromJS(data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EntityBaseDetailsSales {
        data = typeof data === 'object' ? data : {};
        let result = new EntityBaseDetailsSales();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["no"] = this.no;
        data["productCode"] = this.productCode;
        data["productPName"] = this.productPName;
        data["orderId"] = this.orderId;
        data["productId"] = this.productId;
        data["unitPrice"] = this.unitPrice;
        data["quantity"] = this.quantity;
        data["discount"] = this.discount;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IEntityBaseDetailsSales extends IAuditableEntity {
    id?: number;
    no?: number;
    productCode?: string | undefined;
    productPName?: string | undefined;
    orderId?: number;
    productId?: number;
    unitPrice?: number;
    quantity?: number;
    discount?: number;
    product?: Product | undefined;
}

export class OrderDetail extends EntityBaseDetailsSales implements IOrderDetail {
    order?: Order | undefined;

    constructor(data?: IOrderDetail) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.order = data["order"] ? Order.fromJS(data["order"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderDetail {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IOrderDetail extends IEntityBaseDetailsSales {
    order?: Order | undefined;
}

export class Product extends AuditableEntity implements IProduct {
    id?: number;
    name?: string | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    quantityPerUnit?: string | undefined;
    unitPrice?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    reorderLevel?: number | undefined;
    discontinued?: boolean;
    productCategory?: ProductCategory | undefined;
    supplier?: Supplier | undefined;
    orderDetails?: OrderDetail[] | undefined;
    invoiceDetails?: InvoiceDetail[] | undefined;
    offreDetails?: OffreDetail[] | undefined;

    constructor(data?: IProduct) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.supplierId = data["supplierId"];
            this.categoryId = data["categoryId"];
            this.quantityPerUnit = data["quantityPerUnit"];
            this.unitPrice = data["unitPrice"];
            this.unitsInStock = data["unitsInStock"];
            this.unitsOnOrder = data["unitsOnOrder"];
            this.reorderLevel = data["reorderLevel"];
            this.discontinued = data["discontinued"];
            this.productCategory = data["productCategory"] ? ProductCategory.fromJS(data["productCategory"]) : <any>undefined;
            this.supplier = data["supplier"] ? Supplier.fromJS(data["supplier"]) : <any>undefined;
            if (Array.isArray(data["orderDetails"])) {
                this.orderDetails = [] as any;
                for (let item of data["orderDetails"])
                    this.orderDetails!.push(OrderDetail.fromJS(item));
            }
            if (Array.isArray(data["invoiceDetails"])) {
                this.invoiceDetails = [] as any;
                for (let item of data["invoiceDetails"])
                    this.invoiceDetails!.push(InvoiceDetail.fromJS(item));
            }
            if (Array.isArray(data["offreDetails"])) {
                this.offreDetails = [] as any;
                for (let item of data["offreDetails"])
                    this.offreDetails!.push(OffreDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["supplierId"] = this.supplierId;
        data["categoryId"] = this.categoryId;
        data["quantityPerUnit"] = this.quantityPerUnit;
        data["unitPrice"] = this.unitPrice;
        data["unitsInStock"] = this.unitsInStock;
        data["unitsOnOrder"] = this.unitsOnOrder;
        data["reorderLevel"] = this.reorderLevel;
        data["discontinued"] = this.discontinued;
        data["productCategory"] = this.productCategory ? this.productCategory.toJSON() : <any>undefined;
        data["supplier"] = this.supplier ? this.supplier.toJSON() : <any>undefined;
        if (Array.isArray(this.orderDetails)) {
            data["orderDetails"] = [];
            for (let item of this.orderDetails)
                data["orderDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.invoiceDetails)) {
            data["invoiceDetails"] = [];
            for (let item of this.invoiceDetails)
                data["invoiceDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.offreDetails)) {
            data["offreDetails"] = [];
            for (let item of this.offreDetails)
                data["offreDetails"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProduct extends IAuditableEntity {
    id?: number;
    name?: string | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    quantityPerUnit?: string | undefined;
    unitPrice?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    reorderLevel?: number | undefined;
    discontinued?: boolean;
    productCategory?: ProductCategory | undefined;
    supplier?: Supplier | undefined;
    orderDetails?: OrderDetail[] | undefined;
    invoiceDetails?: InvoiceDetail[] | undefined;
    offreDetails?: OffreDetail[] | undefined;
}

export class ProductCategory implements IProductCategory {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;
    products?: Product[] | undefined;

    constructor(data?: IProductCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.picture = data["picture"];
            if (Array.isArray(data["products"])) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["picture"] = this.picture;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductCategory {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;
    products?: Product[] | undefined;
}

export class Supplier implements ISupplier {
    id?: number;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    homePage?: string | undefined;
    products?: Product[] | undefined;

    constructor(data?: ISupplier) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.address = data["address"];
            this.city = data["city"];
            this.region = data["region"];
            this.postalCode = data["postalCode"];
            this.country = data["country"];
            this.phone = data["phone"];
            this.fax = data["fax"];
            this.homePage = data["homePage"];
            if (Array.isArray(data["products"])) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Supplier {
        data = typeof data === 'object' ? data : {};
        let result = new Supplier();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["homePage"] = this.homePage;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISupplier {
    id?: number;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    homePage?: string | undefined;
    products?: Product[] | undefined;
}

export class InvoiceDetail extends EntityBaseDetailsSales implements IInvoiceDetail {
    invoice?: Invoice | undefined;

    constructor(data?: IInvoiceDetail) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.invoice = data["invoice"] ? Invoice.fromJS(data["invoice"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InvoiceDetail {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["invoice"] = this.invoice ? this.invoice.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IInvoiceDetail extends IEntityBaseDetailsSales {
    invoice?: Invoice | undefined;
}

export class Invoice extends EntityBaseHeaderSales implements IInvoice {
    invoiceDetails?: InvoiceDetail[] | undefined;

    constructor(data?: IInvoice) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (Array.isArray(data["invoiceDetails"])) {
                this.invoiceDetails = [] as any;
                for (let item of data["invoiceDetails"])
                    this.invoiceDetails!.push(InvoiceDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Invoice {
        data = typeof data === 'object' ? data : {};
        let result = new Invoice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.invoiceDetails)) {
            data["invoiceDetails"] = [];
            for (let item of this.invoiceDetails)
                data["invoiceDetails"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IInvoice extends IEntityBaseHeaderSales {
    invoiceDetails?: InvoiceDetail[] | undefined;
}

export class EntityBaseCodeNames extends AuditableEntity implements IEntityBaseCodeNames {
    id?: number;
    code?: string | undefined;
    name1?: string | undefined;
    name2?: string | undefined;
    name3?: string | undefined;

    constructor(data?: IEntityBaseCodeNames) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name1 = data["name1"];
            this.name2 = data["name2"];
            this.name3 = data["name3"];
        }
    }

    static fromJS(data: any): EntityBaseCodeNames {
        data = typeof data === 'object' ? data : {};
        let result = new EntityBaseCodeNames();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name1"] = this.name1;
        data["name2"] = this.name2;
        data["name3"] = this.name3;
        super.toJSON(data);
        return data; 
    }
}

export interface IEntityBaseCodeNames extends IAuditableEntity {
    id?: number;
    code?: string | undefined;
    name1?: string | undefined;
    name2?: string | undefined;
    name3?: string | undefined;
}

export class Customer extends EntityBaseCodeNames implements ICustomer {
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    patent?: string | undefined;
    adresse?: string | undefined;
    rc?: string | undefined;
    mail?: string | undefined;
    contracts?: Contract[] | undefined;
    customerLocationId?: number | undefined;
    customerLocation?: CustomerLocation | undefined;
    orders?: Order[] | undefined;
    invoices?: Invoice[] | undefined;
    offres?: Offre[] | undefined;

    constructor(data?: ICustomer) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.address = data["address"];
            this.city = data["city"];
            this.region = data["region"];
            this.postalCode = data["postalCode"];
            this.country = data["country"];
            this.phone = data["phone"];
            this.fax = data["fax"];
            this.patent = data["patent"];
            this.adresse = data["adresse"];
            this.rc = data["rc"];
            this.mail = data["mail"];
            if (Array.isArray(data["contracts"])) {
                this.contracts = [] as any;
                for (let item of data["contracts"])
                    this.contracts!.push(Contract.fromJS(item));
            }
            this.customerLocationId = data["customerLocationId"];
            this.customerLocation = data["customerLocation"] ? CustomerLocation.fromJS(data["customerLocation"]) : <any>undefined;
            if (Array.isArray(data["orders"])) {
                this.orders = [] as any;
                for (let item of data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
            if (Array.isArray(data["invoices"])) {
                this.invoices = [] as any;
                for (let item of data["invoices"])
                    this.invoices!.push(Invoice.fromJS(item));
            }
            if (Array.isArray(data["offres"])) {
                this.offres = [] as any;
                for (let item of data["offres"])
                    this.offres!.push(Offre.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["patent"] = this.patent;
        data["adresse"] = this.adresse;
        data["rc"] = this.rc;
        data["mail"] = this.mail;
        if (Array.isArray(this.contracts)) {
            data["contracts"] = [];
            for (let item of this.contracts)
                data["contracts"].push(item.toJSON());
        }
        data["customerLocationId"] = this.customerLocationId;
        data["customerLocation"] = this.customerLocation ? this.customerLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        if (Array.isArray(this.invoices)) {
            data["invoices"] = [];
            for (let item of this.invoices)
                data["invoices"].push(item.toJSON());
        }
        if (Array.isArray(this.offres)) {
            data["offres"] = [];
            for (let item of this.offres)
                data["offres"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomer extends IEntityBaseCodeNames {
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    patent?: string | undefined;
    adresse?: string | undefined;
    rc?: string | undefined;
    mail?: string | undefined;
    contracts?: Contract[] | undefined;
    customerLocationId?: number | undefined;
    customerLocation?: CustomerLocation | undefined;
    orders?: Order[] | undefined;
    invoices?: Invoice[] | undefined;
    offres?: Offre[] | undefined;
}

export class Contract extends EntityBaseCode implements IContract {
    price?: string | undefined;
    startDate?: Date;
    endDate?: Date;
    paymentDate?: Date;
    tax?: string | undefined;
    description?: string | undefined;
    lessorID?: number;
    customerId?: number;
    bankID?: number;
    productID?: number;

    constructor(data?: IContract) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.price = data["price"];
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>undefined;
            this.paymentDate = data["paymentDate"] ? new Date(data["paymentDate"].toString()) : <any>undefined;
            this.tax = data["tax"];
            this.description = data["description"];
            this.lessorID = data["lessorID"];
            this.customerId = data["customerId"];
            this.bankID = data["bankID"];
            this.productID = data["productID"];
        }
    }

    static fromJS(data: any): Contract {
        data = typeof data === 'object' ? data : {};
        let result = new Contract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["price"] = this.price;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["tax"] = this.tax;
        data["description"] = this.description;
        data["lessorID"] = this.lessorID;
        data["customerId"] = this.customerId;
        data["bankID"] = this.bankID;
        data["productID"] = this.productID;
        super.toJSON(data);
        return data; 
    }
}

export interface IContract extends IEntityBaseCode {
    price?: string | undefined;
    startDate?: Date;
    endDate?: Date;
    paymentDate?: Date;
    tax?: string | undefined;
    description?: string | undefined;
    lessorID?: number;
    customerId?: number;
    bankID?: number;
    productID?: number;
}

export class EntityBaseSetting extends AuditableEntity implements IEntityBaseSetting {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IEntityBaseSetting) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): EntityBaseSetting {
        data = typeof data === 'object' ? data : {};
        let result = new EntityBaseSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        super.toJSON(data);
        return data; 
    }
}

export interface IEntityBaseSetting extends IAuditableEntity {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
}

export class CustomerLocation extends EntityBaseSetting implements ICustomerLocation {
    id?: number;
    longitude?: number;
    latitude?: number;

    constructor(data?: ICustomerLocation) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.longitude = data["longitude"];
            this.latitude = data["latitude"];
        }
    }

    static fromJS(data: any): CustomerLocation {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        super.toJSON(data);
        return data; 
    }
}

export interface ICustomerLocation extends IEntityBaseSetting {
    id?: number;
    longitude?: number;
    latitude?: number;
}

export class Offre extends EntityBaseHeaderSales implements IOffre {
    percentage?: number;
    offreDetails?: OffreDetail[] | undefined;

    constructor(data?: IOffre) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.percentage = data["percentage"];
            if (Array.isArray(data["offreDetails"])) {
                this.offreDetails = [] as any;
                for (let item of data["offreDetails"])
                    this.offreDetails!.push(OffreDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Offre {
        data = typeof data === 'object' ? data : {};
        let result = new Offre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["percentage"] = this.percentage;
        if (Array.isArray(this.offreDetails)) {
            data["offreDetails"] = [];
            for (let item of this.offreDetails)
                data["offreDetails"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IOffre extends IEntityBaseHeaderSales {
    percentage?: number;
    offreDetails?: OffreDetail[] | undefined;
}

export class OffreDetail extends EntityBaseDetailsSales implements IOffreDetail {
    offre?: Offre | undefined;

    constructor(data?: IOffreDetail) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.offre = data["offre"] ? Offre.fromJS(data["offre"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OffreDetail {
        data = typeof data === 'object' ? data : {};
        let result = new OffreDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offre"] = this.offre ? this.offre.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IOffreDetail extends IEntityBaseDetailsSales {
    offre?: Offre | undefined;
}

export class Employee extends AuditableEntity implements IEmployee {
    id?: number;
    userId?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    title?: string | undefined;
    titleOfCourtesy?: string | undefined;
    birthDate?: Date | undefined;
    hireDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    extension?: string | undefined;
    photo?: string | undefined;
    notes?: string | undefined;
    reportsTo?: number | undefined;
    photoPath?: string | undefined;
    manager?: Employee | undefined;
    employeeTerritories?: EmployeeTerritory[] | undefined;
    directReports?: Employee[] | undefined;
    orders?: Order[] | undefined;
    invoices?: Invoice[] | undefined;
    offres?: Offre[] | undefined;

    constructor(data?: IEmployee) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.lastName = data["lastName"];
            this.firstName = data["firstName"];
            this.title = data["title"];
            this.titleOfCourtesy = data["titleOfCourtesy"];
            this.birthDate = data["birthDate"] ? new Date(data["birthDate"].toString()) : <any>undefined;
            this.hireDate = data["hireDate"] ? new Date(data["hireDate"].toString()) : <any>undefined;
            this.address = data["address"];
            this.city = data["city"];
            this.region = data["region"];
            this.postalCode = data["postalCode"];
            this.country = data["country"];
            this.homePhone = data["homePhone"];
            this.extension = data["extension"];
            this.photo = data["photo"];
            this.notes = data["notes"];
            this.reportsTo = data["reportsTo"];
            this.photoPath = data["photoPath"];
            this.manager = data["manager"] ? Employee.fromJS(data["manager"]) : <any>undefined;
            if (Array.isArray(data["employeeTerritories"])) {
                this.employeeTerritories = [] as any;
                for (let item of data["employeeTerritories"])
                    this.employeeTerritories!.push(EmployeeTerritory.fromJS(item));
            }
            if (Array.isArray(data["directReports"])) {
                this.directReports = [] as any;
                for (let item of data["directReports"])
                    this.directReports!.push(Employee.fromJS(item));
            }
            if (Array.isArray(data["orders"])) {
                this.orders = [] as any;
                for (let item of data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
            if (Array.isArray(data["invoices"])) {
                this.invoices = [] as any;
                for (let item of data["invoices"])
                    this.invoices!.push(Invoice.fromJS(item));
            }
            if (Array.isArray(data["offres"])) {
                this.offres = [] as any;
                for (let item of data["offres"])
                    this.offres!.push(Offre.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Employee {
        data = typeof data === 'object' ? data : {};
        let result = new Employee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["title"] = this.title;
        data["titleOfCourtesy"] = this.titleOfCourtesy;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["homePhone"] = this.homePhone;
        data["extension"] = this.extension;
        data["photo"] = this.photo;
        data["notes"] = this.notes;
        data["reportsTo"] = this.reportsTo;
        data["photoPath"] = this.photoPath;
        data["manager"] = this.manager ? this.manager.toJSON() : <any>undefined;
        if (Array.isArray(this.employeeTerritories)) {
            data["employeeTerritories"] = [];
            for (let item of this.employeeTerritories)
                data["employeeTerritories"].push(item.toJSON());
        }
        if (Array.isArray(this.directReports)) {
            data["directReports"] = [];
            for (let item of this.directReports)
                data["directReports"].push(item.toJSON());
        }
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        if (Array.isArray(this.invoices)) {
            data["invoices"] = [];
            for (let item of this.invoices)
                data["invoices"].push(item.toJSON());
        }
        if (Array.isArray(this.offres)) {
            data["offres"] = [];
            for (let item of this.offres)
                data["offres"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IEmployee extends IAuditableEntity {
    id?: number;
    userId?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    title?: string | undefined;
    titleOfCourtesy?: string | undefined;
    birthDate?: Date | undefined;
    hireDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    extension?: string | undefined;
    photo?: string | undefined;
    notes?: string | undefined;
    reportsTo?: number | undefined;
    photoPath?: string | undefined;
    manager?: Employee | undefined;
    employeeTerritories?: EmployeeTerritory[] | undefined;
    directReports?: Employee[] | undefined;
    orders?: Order[] | undefined;
    invoices?: Invoice[] | undefined;
    offres?: Offre[] | undefined;
}

export class EmployeeTerritory implements IEmployeeTerritory {
    employeeId?: number;
    territoryId?: string | undefined;
    employee?: Employee | undefined;
    territory?: Territory | undefined;

    constructor(data?: IEmployeeTerritory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.employeeId = data["employeeId"];
            this.territoryId = data["territoryId"];
            this.employee = data["employee"] ? Employee.fromJS(data["employee"]) : <any>undefined;
            this.territory = data["territory"] ? Territory.fromJS(data["territory"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EmployeeTerritory {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeTerritory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeId"] = this.employeeId;
        data["territoryId"] = this.territoryId;
        data["employee"] = this.employee ? this.employee.toJSON() : <any>undefined;
        data["territory"] = this.territory ? this.territory.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEmployeeTerritory {
    employeeId?: number;
    territoryId?: string | undefined;
    employee?: Employee | undefined;
    territory?: Territory | undefined;
}

export class Territory implements ITerritory {
    id?: string | undefined;
    territoryDescription?: string | undefined;
    regionId?: number;
    region?: Region | undefined;
    employeeTerritories?: EmployeeTerritory[] | undefined;

    constructor(data?: ITerritory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.territoryDescription = data["territoryDescription"];
            this.regionId = data["regionId"];
            this.region = data["region"] ? Region.fromJS(data["region"]) : <any>undefined;
            if (Array.isArray(data["employeeTerritories"])) {
                this.employeeTerritories = [] as any;
                for (let item of data["employeeTerritories"])
                    this.employeeTerritories!.push(EmployeeTerritory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Territory {
        data = typeof data === 'object' ? data : {};
        let result = new Territory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["territoryDescription"] = this.territoryDescription;
        data["regionId"] = this.regionId;
        data["region"] = this.region ? this.region.toJSON() : <any>undefined;
        if (Array.isArray(this.employeeTerritories)) {
            data["employeeTerritories"] = [];
            for (let item of this.employeeTerritories)
                data["employeeTerritories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITerritory {
    id?: string | undefined;
    territoryDescription?: string | undefined;
    regionId?: number;
    region?: Region | undefined;
    employeeTerritories?: EmployeeTerritory[] | undefined;
}

export class Region implements IRegion {
    id?: number;
    regionDescription?: string | undefined;
    territories?: Territory[] | undefined;

    constructor(data?: IRegion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.regionDescription = data["regionDescription"];
            if (Array.isArray(data["territories"])) {
                this.territories = [] as any;
                for (let item of data["territories"])
                    this.territories!.push(Territory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Region {
        data = typeof data === 'object' ? data : {};
        let result = new Region();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["regionDescription"] = this.regionDescription;
        if (Array.isArray(this.territories)) {
            data["territories"] = [];
            for (let item of this.territories)
                data["territories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRegion {
    id?: number;
    regionDescription?: string | undefined;
    territories?: Territory[] | undefined;
}

export class UpsertOrderCommand implements IUpsertOrderCommand {
    id?: number | undefined;
    code?: string | undefined;
    date?: Date;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    total?: number;
    customerId?: number;
    employeeId?: number;
    shipper?: Shipper | undefined;
    orderDetails?: OrderDetail[] | undefined;

    constructor(data?: IUpsertOrderCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.date = data["date"] ? new Date(data["date"].toString()) : <any>undefined;
            this.orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>undefined;
            this.requiredDate = data["requiredDate"] ? new Date(data["requiredDate"].toString()) : <any>undefined;
            this.shippedDate = data["shippedDate"] ? new Date(data["shippedDate"].toString()) : <any>undefined;
            this.shipVia = data["shipVia"];
            this.freight = data["freight"];
            this.shipName = data["shipName"];
            this.shipAddress = data["shipAddress"];
            this.shipCity = data["shipCity"];
            this.shipRegion = data["shipRegion"];
            this.shipPostalCode = data["shipPostalCode"];
            this.shipCountry = data["shipCountry"];
            this.total = data["total"];
            this.customerId = data["customerId"];
            this.employeeId = data["employeeId"];
            this.shipper = data["shipper"] ? Shipper.fromJS(data["shipper"]) : <any>undefined;
            if (Array.isArray(data["orderDetails"])) {
                this.orderDetails = [] as any;
                for (let item of data["orderDetails"])
                    this.orderDetails!.push(OrderDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpsertOrderCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertOrderCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requiredDate"] = this.requiredDate ? this.requiredDate.toISOString() : <any>undefined;
        data["shippedDate"] = this.shippedDate ? this.shippedDate.toISOString() : <any>undefined;
        data["shipVia"] = this.shipVia;
        data["freight"] = this.freight;
        data["shipName"] = this.shipName;
        data["shipAddress"] = this.shipAddress;
        data["shipCity"] = this.shipCity;
        data["shipRegion"] = this.shipRegion;
        data["shipPostalCode"] = this.shipPostalCode;
        data["shipCountry"] = this.shipCountry;
        data["total"] = this.total;
        data["customerId"] = this.customerId;
        data["employeeId"] = this.employeeId;
        data["shipper"] = this.shipper ? this.shipper.toJSON() : <any>undefined;
        if (Array.isArray(this.orderDetails)) {
            data["orderDetails"] = [];
            for (let item of this.orderDetails)
                data["orderDetails"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpsertOrderCommand {
    id?: number | undefined;
    code?: string | undefined;
    date?: Date;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    total?: number;
    customerId?: number;
    employeeId?: number;
    shipper?: Shipper | undefined;
    orderDetails?: OrderDetail[] | undefined;
}

export class CategoriesListVm implements ICategoriesListVm {
    categories?: CategoryDto[] | undefined;
    count?: number;

    constructor(data?: ICategoriesListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["categories"])) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(CategoryDto.fromJS(item));
            }
            this.count = data["count"];
        }
    }

    static fromJS(data: any): CategoriesListVm {
        data = typeof data === 'object' ? data : {};
        let result = new CategoriesListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data; 
    }
}

export interface ICategoriesListVm {
    categories?: CategoryDto[] | undefined;
    count?: number;
}

export class CategoryDto implements ICategoryDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;

    constructor(data?: ICategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.picture = data["picture"];
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["picture"] = this.picture;
        return data; 
    }
}

export interface ICategoryDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;
}

export class UpsertProductCategoryCommand implements IUpsertProductCategoryCommand {
    id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;

    constructor(data?: IUpsertProductCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.picture = data["picture"];
        }
    }

    static fromJS(data: any): UpsertProductCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertProductCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["picture"] = this.picture;
        return data; 
    }
}

export interface IUpsertProductCategoryCommand {
    id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;
}

export class ProductsListVm implements IProductsListVm {
    products?: ProductDto[] | undefined;
    createEnabled?: boolean;

    constructor(data?: IProductsListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["products"])) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(ProductDto.fromJS(item));
            }
            this.createEnabled = data["createEnabled"];
        }
    }

    static fromJS(data: any): ProductsListVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProductsListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["createEnabled"] = this.createEnabled;
        return data; 
    }
}

export interface IProductsListVm {
    products?: ProductDto[] | undefined;
    createEnabled?: boolean;
}

export class ProductDto implements IProductDto {
    productId?: number;
    name?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    supplierCompanyName?: string | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;
    discontinued?: boolean;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.name = data["name"];
            this.unitPrice = data["unitPrice"];
            this.supplierId = data["supplierId"];
            this.supplierCompanyName = data["supplierCompanyName"];
            this.categoryId = data["categoryId"];
            this.categoryName = data["categoryName"];
            this.discontinued = data["discontinued"];
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["name"] = this.name;
        data["unitPrice"] = this.unitPrice;
        data["supplierId"] = this.supplierId;
        data["supplierCompanyName"] = this.supplierCompanyName;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["discontinued"] = this.discontinued;
        return data; 
    }
}

export interface IProductDto {
    productId?: number;
    name?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    supplierCompanyName?: string | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;
    discontinued?: boolean;
}

export class ProductDetailVm implements IProductDetailVm {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    supplierCompanyName?: string | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;
    discontinued?: boolean;
    editEnabled?: boolean;
    deleteEnabled?: boolean;

    constructor(data?: IProductDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.unitPrice = data["unitPrice"];
            this.supplierId = data["supplierId"];
            this.supplierCompanyName = data["supplierCompanyName"];
            this.categoryId = data["categoryId"];
            this.categoryName = data["categoryName"];
            this.discontinued = data["discontinued"];
            this.editEnabled = data["editEnabled"];
            this.deleteEnabled = data["deleteEnabled"];
        }
    }

    static fromJS(data: any): ProductDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["unitPrice"] = this.unitPrice;
        data["supplierId"] = this.supplierId;
        data["supplierCompanyName"] = this.supplierCompanyName;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["discontinued"] = this.discontinued;
        data["editEnabled"] = this.editEnabled;
        data["deleteEnabled"] = this.deleteEnabled;
        return data; 
    }
}

export interface IProductDetailVm {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    supplierCompanyName?: string | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;
    discontinued?: boolean;
    editEnabled?: boolean;
    deleteEnabled?: boolean;
}

export class CreateProductCommand implements ICreateProductCommand {
    name?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    discontinued?: boolean;

    constructor(data?: ICreateProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.unitPrice = data["unitPrice"];
            this.supplierId = data["supplierId"];
            this.categoryId = data["categoryId"];
            this.discontinued = data["discontinued"];
        }
    }

    static fromJS(data: any): CreateProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["unitPrice"] = this.unitPrice;
        data["supplierId"] = this.supplierId;
        data["categoryId"] = this.categoryId;
        data["discontinued"] = this.discontinued;
        return data; 
    }
}

export interface ICreateProductCommand {
    name?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    discontinued?: boolean;
}

export class UpdateProductCommand implements IUpdateProductCommand {
    productId?: number;
    name?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    discontinued?: boolean;

    constructor(data?: IUpdateProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.name = data["name"];
            this.unitPrice = data["unitPrice"];
            this.supplierId = data["supplierId"];
            this.categoryId = data["categoryId"];
            this.discontinued = data["discontinued"];
        }
    }

    static fromJS(data: any): UpdateProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["name"] = this.name;
        data["unitPrice"] = this.unitPrice;
        data["supplierId"] = this.supplierId;
        data["categoryId"] = this.categoryId;
        data["discontinued"] = this.discontinued;
        return data; 
    }
}

export interface IUpdateProductCommand {
    productId?: number;
    name?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    discontinued?: boolean;
}

export class VendorCategoriesListVm implements IVendorCategoriesListVm {
    categories?: VendorCategoryDto[] | undefined;
    count?: number;

    constructor(data?: IVendorCategoriesListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["categories"])) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(VendorCategoryDto.fromJS(item));
            }
            this.count = data["count"];
        }
    }

    static fromJS(data: any): VendorCategoriesListVm {
        data = typeof data === 'object' ? data : {};
        let result = new VendorCategoriesListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data; 
    }
}

export interface IVendorCategoriesListVm {
    categories?: VendorCategoryDto[] | undefined;
    count?: number;
}

export class VendorCategoryDto implements IVendorCategoryDto {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;

    constructor(data?: IVendorCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): VendorCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new VendorCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IVendorCategoryDto {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
}

export class UpsertVendorCategoryCommand implements IUpsertVendorCategoryCommand {
    id?: number | undefined;
    code?: string | undefined;
    name?: string | undefined;
    remark?: string | undefined;

    constructor(data?: IUpsertVendorCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): UpsertVendorCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertVendorCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data; 
    }
}

export interface IUpsertVendorCategoryCommand {
    id?: number | undefined;
    code?: string | undefined;
    name?: string | undefined;
    remark?: string | undefined;
}

export class VendorLookupDto implements IVendorLookupDto {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IVendorLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): VendorLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new VendorLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IVendorLookupDto {
    id?: string | undefined;
    name?: string | undefined;
}

export class VendorDetailVm implements IVendorDetailVm {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: IVendorDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): VendorDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new VendorDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface IVendorDetailVm {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class CreateVendorCommand implements ICreateVendorCommand {
    id?: number;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: ICreateVendorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): CreateVendorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVendorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface ICreateVendorCommand {
    id?: number;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class UpdateVendorCommand implements IUpdateVendorCommand {
    id?: number;
    adress?: string | undefined;
    city?: string | undefined;
    phone?: string | undefined;
    gsm?: string | undefined;
    fax?: string | undefined;
    email?: string | undefined;

    constructor(data?: IUpdateVendorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.adress = data["adress"];
            this.city = data["city"];
            this.phone = data["phone"];
            this.gsm = data["gsm"];
            this.fax = data["fax"];
            this.email = data["email"];
        }
    }

    static fromJS(data: any): UpdateVendorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateVendorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["adress"] = this.adress;
        data["city"] = this.city;
        data["phone"] = this.phone;
        data["gsm"] = this.gsm;
        data["fax"] = this.fax;
        data["email"] = this.email;
        return data; 
    }
}

export interface IUpdateVendorCommand {
    id?: number;
    adress?: string | undefined;
    city?: string | undefined;
    phone?: string | undefined;
    gsm?: string | undefined;
    fax?: string | undefined;
    email?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}